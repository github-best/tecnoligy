-------建表语句
# Student(Sid,Sname,Sage,Ssex) 学生表 
CREATE TABLE student (
  sid varchar(10) NOT NULL,
  sName varchar(20) DEFAULT NULL,
  sAge datetime DEFAULT '1980-10-12 23:12:36',
  sSex varchar(10) DEFAULT NULL,
  PRIMARY KEY (sid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

# Course(Cid,Cname,Tid) 课程表 
CREATE TABLE course (
  cid varchar(10) NOT NULL,
  cName varchar(10) DEFAULT NULL,
  tid int(20) DEFAULT NULL,
  PRIMARY KEY (cid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

# SC(Sid,Cid,score) 成绩表 
CREATE TABLE sc (
  sid varchar(10) DEFAULT NULL,
  cid varchar(10) DEFAULT NULL,
  score int(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

# Teacher(Tid,Tname) 教师表 
CREATE TABLE teacher (
  tid int(10) DEFAULT NULL,
  tName varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


-------插入数据
insert  into teacher(tid,tName) values (1,'李老师'),(2,'何以琛'),(3,'叶平');

insert  into student(sid,sName,sAge,sSex) values ('1001','张三丰','1980-10-12 23:12:36','男'),('1002','张无极','1995-10-12 23:12:36','男'),
('1003','李奎','1992-10-12 23:12:36','女'),('1004','李元宝','1980-10-12 23:12:36','女'),
('1005','李世明','1981-10-12 23:12:36','男'),('1006','赵六','1986-10-12 23:12:36','男'),('1007','田七','1981-10-12 23:12:36','女');

insert  into sc(sid,cid,score) values ('1001','001',80),('1001','002',60),('1001','003',75),('1002','001',85),('1002','002',70),
('1003','004',100),('1003','001',90),('1003','002',55),('1004','002',65),('1004','003',60);

insert  into course(cid,cName,tid) values ('001','企业管理',3),('002','马克思',3),('003','UML',2),('004','数据库',1),('005','英语',1);


------练习
1、查询“001”课程比“002”课程成绩高的所有学生的学号; 
select a.Sid from (select sid,score from SC where Cid='001') a,(select sid,score 
from SC where Cid='002') b 
where a.score>b.score and a.sid=b.sid; 
2、查询平均成绩大于60分的同学的学号和平均成绩; 
select Sid,avg(score) 
from sc 
group by Sid having avg(score) >60; 
3、查询所有同学的学号、姓名、选课数、总成绩; 
select Student.Sid,Student.Sname,count(SC.Cid),sum(score) 
from Student left Outer join SC on Student.Sid=SC.Sid 
group by Student.Sid,Sname 
4、查询姓“李”的老师的个数; 
select count(distinct(Tname)) 
from Teacher 
where Tname like '李%'; 
5、查询没学过“叶平”老师课的同学的学号、姓名; 
select Student.Sid,Student.Sname 
from Student 
where Sid not in (select distinct( SC.Sid) from  r where SC.Cid=Course.Cid and Teacher.Tid=Course.Tid and Teacher.Tname='叶平'); 
6、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名; 
select Student.Sid,Student.Sname from Student,SC where Student.Sid=SC.Sid and SC.Cid='001'and exists( Select * from SC as SC_2 where SC_2.Sid=SC.Sid and SC_2.Cid='002'); 
7、查询学过“叶平”老师所教的所有课的同学的学号、姓名; 
select Sid,Sname 
from Student 
where Sid in (select Sid from SC ,Course ,Teacher where SC.Cid=Course.Cid and Teacher.Tid=Course.Tid and Teacher.Tname='叶平' group by Sid having count(SC.Cid)=(select count(Cid) from Course,Teacher where Teacher.Tid=Course.Tid and Tname='叶平')); 
8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名; 
Select Sid,Sname from (select Student.Sid,Student.Sname,score ,(select score from SC SC_2 where SC_2.Sid=Student.Sid and SC_2.Cid='002') score2 
from Student,SC where Student.Sid=SC.Sid and Cid='001') S_2 where score2 <score; 
9、查询所有课程成绩小于60分的同学的学号、姓名; 
select Sid,Sname 
from Student 
where Sid not in (select Student.Sid from Student,SC where S.Sid=SC.Sid and score>60); 
10、查询没有学全所有课的同学的学号、姓名; 
select Student.Sid,Student.Sname 
from Student,SC 
where Student.Sid=SC.Sid group by Student.Sid,Student.Sname having count(Cid) <(select count(Cid) from Course); 
11、查询至少有一门课与学号为“1001”的同学所学相同的同学的学号和姓名; 
select Sid,Sname from Student,SC where Student.Sid=SC.Sid and Cid in select Cid from SC where Sid='1001'; 
12、查询至少学过学号为“001”同学所有一门课的其他同学学号和姓名; 
select distinct SC.Sid,Sname 
from Student,SC 
where Student.Sid=SC.Sid and Cid in (select Cid from SC where Sid='001'); 
13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩; 
update SC set score=(select avg(SC_2.score) 
from SC SC_2 
where SC_2.Cid=SC.Cid ) from Course,Teacher where Course.Cid=SC.Cid and Course.Tid=Teacher.Tid and Teacher.Tname='叶平'); 
14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名; 
select Sid from SC where Cid in (select Cid from SC where Sid='1002') 
group by Sid having count(*)=(select count(*) from SC where Sid='1002'); 
15、删除学习“叶平”老师课的SC表记录; 
Delect SC 
from course ,Teacher 
where Course.Cid=SC.Cid and Course.Tid= Teacher.Tid and Tname='叶平'; 
16、向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“003”课程的同学学号、2号课的平均成绩; 
Insert SC select Sid,'002',(Select avg(score) 
from SC where Cid='002') from Student where Sid not in (Select Sid from SC where Cid='002'); 
17、按平均成绩从高到低显示所有学生的“数据库”、“企业管理”、“英语”三门的课程成绩，按如下形式显示： 学生ID,,数据库,企业管理,英语,有效课程数,有效平均分 
SELECT Sid as 学生ID 
,(SELECT score FROM SC WHERE SC.Sid=t.Sid AND Cid='004') AS 数据库 
,(SELECT score FROM SC WHERE SC.Sid=t.Sid AND Cid='001') AS 企业管理 
,(SELECT score FROM SC WHERE SC.Sid=t.Sid AND Cid='006') AS 英语 
,COUNT(*) AS 有效课程数, AVG(t.score) AS 平均成绩 
FROM SC AS t 
GROUP BY Sid 
ORDER BY avg(t.score) 
18、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分 
SELECT L.Cid As 课程ID,L.score AS 最高分,R.score AS 最低分 
FROM SC L ,SC AS R 
WHERE L.Cid = R.Cid and 
L.score = (SELECT MAX(IL.score) 
FROM SC AS IL,Student AS IM 
WHERE L.Cid = IL.Cid and IM.Sid=IL.Sid 
GROUP BY IL.Cid) 
AND 
R.Score = (SELECT MIN(IR.score) 
FROM SC AS IR 
WHERE R.Cid = IR.Cid 
GROUP BY IR.Cid 
); 
19、按各科平均成绩从低到高和及格率的百分数从高到低顺序 
SELECT t.Cid AS 课程号,max(course.Cname)AS 课程名,isnull(AVG(score),0) AS 平均成绩 
,100 * SUM(CASE WHEN isnull(score,0)>=60 THEN 1 ELSE 0 END)/COUNT(*) AS 及格百分数 
FROM SC T,Course 
where t.Cid=course.Cid 
GROUP BY t.Cid 
ORDER BY 100 * SUM(CASE WHEN isnull(score,0)>=60 THEN 1 ELSE 0 END)/COUNT(*) DESC 
20、查询如下课程平均成绩和及格率的百分数(用"1行"显示): 企业管理（001），马克思（002），OO&UML （003），数据库（004） 
SELECT SUM(CASE WHEN Cid ='001' THEN score ELSE 0 END)/SUM(CASE Cid WHEN '001' THEN 1 ELSE 0 END) AS 企业管理平均分 
,100 * SUM(CASE WHEN Cid = '001' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN Cid = '001' THEN 1 ELSE 0 END) AS 企业管理及格百分数 
,SUM(CASE WHEN Cid = '002' THEN score ELSE 0 END)/SUM(CASE Cid WHEN '002' THEN 1 ELSE 0 END) AS 马克思平均分 
,100 * SUM(CASE WHEN Cid = '002' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN Cid = '002' THEN 1 ELSE 0 END) AS 马克思及格百分数 
,SUM(CASE WHEN Cid = '003' THEN score ELSE 0 END)/SUM(CASE Cid WHEN '003' THEN 1 ELSE 0 END) AS UML平均分 
,100 * SUM(CASE WHEN Cid = '003' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN Cid = '003' THEN 1 ELSE 0 END) AS UML及格百分数 
,SUM(CASE WHEN Cid = '004' THEN score ELSE 0 END)/SUM(CASE Cid WHEN '004' THEN 1 ELSE 0 END) AS 数据库平均分 
,100 * SUM(CASE WHEN Cid = '004' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN Cid = '004' THEN 1 ELSE 0 END) AS 数据库及格百分数 
FROM SC 
21、查询不同老师所教不同课程平均分从高到低显示 
SELECT max(Z.Tid) AS 教师ID,MAX(Z.Tname) AS 教师姓名,C.Cid AS 课程ＩＤ,MAX(C.Cname) AS 课程名称,AVG(Score) AS 平均成绩 
FROM SC AS T,Course AS C ,Teacher AS Z 
where T.Cid=C.Cid and C.Tid=Z.Tid 
GROUP BY C.Cid 
ORDER BY AVG(Score) DESC 
22、查询如下课程成绩第 3 名到第 6 名的学生成绩单：企业管理（001），马克思（002），UML （003），数据库（004） 
[学生ID],[学生姓名],企业管理,马克思,UML,数据库,平均成绩 
SELECT DISTINCT top 3 
SC.Sid As 学生学号, 
Student.Sname AS 学生姓名 , 
T1.score AS 企业管理, 
T2.score AS 马克思, 
T3.score AS UML, 
T4.score AS 数据库, 
ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) as 总分 
FROM Student,SC LEFT JOIN SC AS T1 
ON SC.Sid = T1.Sid AND T1.Cid = '001' 
LEFT JOIN SC AS T2 
ON SC.Sid = T2.Sid AND T2.Cid = '002' 
LEFT JOIN SC AS T3 
ON SC.Sid = T3.Sid AND T3.Cid = '003' 
LEFT JOIN SC AS T4 
ON SC.Sid = T4.Sid AND T4.Cid = '004' 
WHERE student.Sid=SC.Sid and 
ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) 
NOT IN 
(SELECT 
DISTINCT 
TOP 15 WITH TIES 
ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) 
FROM sc 
LEFT JOIN sc AS T1 
ON sc.Sid = T1.Sid AND T1.Cid = 'k1' 
LEFT JOIN sc AS T2 
ON sc.Sid = T2.Sid AND T2.Cid = 'k2' 
LEFT JOIN sc AS T3 
ON sc.Sid = T3.Sid AND T3.Cid = 'k3' 
LEFT JOIN sc AS T4 
ON sc.Sid = T4.Sid AND T4.Cid = 'k4' 
ORDER BY ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) DESC); 

23、统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ <60] 
SELECT SC.Cid as 课程ID, Cname as 课程名称 
,SUM(CASE WHEN score BETWEEN 85 AND 100 THEN 1 ELSE 0 END) AS [100 - 85] 
,SUM(CASE WHEN score BETWEEN 70 AND 85 THEN 1 ELSE 0 END) AS [85 - 70] 
,SUM(CASE WHEN score BETWEEN 60 AND 70 THEN 1 ELSE 0 END) AS [70 - 60] 
,SUM(CASE WHEN score < 60 THEN 1 ELSE 0 END) AS [60 -] 
FROM SC,Course 
where SC.Cid=Course.Cid 
GROUP BY SC.Cid,Cname; 

24、查询学生平均成绩及其名次 
SELECT 1+(SELECT COUNT( distinct 平均成绩) 
FROM (SELECT Sid,AVG(score) AS 平均成绩 
FROM SC 
GROUP BY Sid 
) AS T1 
WHERE 平均成绩 > T2.平均成绩) as 名次, 
Sid as 学生学号,平均成绩 
FROM (SELECT Sid,AVG(score) 平均成绩 
FROM SC 
GROUP BY Sid 
) AS T2 
ORDER BY 平均成绩 desc; 

25、查询各科成绩前三名的记录:(不考虑成绩并列情况) 
SELECT t1.Sid as 学生ID,t1.Cid as 课程ID,Score as 分数 
FROM SC t1 
WHERE score IN (SELECT TOP 3 score 
FROM SC 
WHERE t1.Cid= Cid 
ORDER BY score DESC 
) 
ORDER BY t1.Cid; 
26、查询每门课程被选修的学生数 
select cid,count(Sid) from sc group by Cid; 
27、查询出只选修了一门课程的全部学生的学号和姓名 
select SC.Sid,Student.Sname,count(Cid) AS 选课数 
from SC ,Student 
where SC.Sid=Student.Sid group by SC.Sid ,Student.Sname having count(Cid)=1; 
28、查询男生、女生人数 
Select count(Ssex) as 男生人数 from Student group by Ssex having Ssex='男'; 
Select count(Ssex) as 女生人数 from Student group by Ssex having Ssex='女'; 
29、查询姓“张”的学生名单 
SELECT Sname FROM Student WHERE Sname like '张%'; 
30、查询同名同性学生名单，并统计同名人数 
select Sname,count(*) from Student group by Sname having count(*)>1;; 
31、1981年出生的学生名单(注：Student表中Sage列的类型是datetime) 
select Sname, CONVERT(char (11),DATEPART(year,Sage)) as age 
from student 
where CONVERT(char(11),DATEPART(year,Sage))='1981'; 
32、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列 
Select Cid,Avg(score) from SC group by Cid order by Avg(score),Cid DESC ; 
33、查询平均成绩大于85的所有学生的学号、姓名和平均成绩 
select Sname,SC.Sid ,avg(score) 
from Student,SC 
where Student.Sid=SC.Sid group by SC.Sid,Sname having avg(score)>85; 
34、查询课程名称为“数据库”，且分数低于60的学生姓名和分数 
Select Sname,isnull(score,0) 
from Student,SC,Course 
where SC.Sid=Student.Sid and SC.Cid=Course.Cid and Course.Cname='数据库'and score <60; 
35、查询所有学生的选课情况; 
SELECT SC.Sid,SC.Cid,Sname,Cname 
FROM SC,Student,Course 
where SC.Sid=Student.Sid and SC.Cid=Course.Cid ; 
36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数; 
SELECT distinct student.Sid,student.Sname,SC.Cid,SC.score 
FROM student,Sc 
WHERE SC.score>=70 AND SC.Sid=student.Sid; 
37、查询不及格的课程，并按课程号从大到小排列 
select cid from sc where scor e <60 order by Cid ; 
38、查询课程编号为003且课程成绩在80分以上的学生的学号和姓名; 
select SC.Sid,Student.Sname from SC,Student where SC.Sid=Student.Sid and Score>80 and Cid='003'; 
39、求选了课程的学生人数 
select count(*) from sc; 
40、查询选修“叶平”老师所授课程的学生中，成绩最高的学生姓名及其成绩 
select Student.Sname,score 
from Student,SC,Course C,Teacher 
where Student.Sid=SC.Sid and SC.Cid=C.Cid and C.Tid=Teacher.Tid and Teacher.Tname='叶平' and SC.score=(select max(score)from SC where Cid=C.Cid ); 
41、查询各个课程及相应的选修人数 
select count(*) from sc group by Cid; 
42、查询不同课程成绩相同的学生的学号、课程号、学生成绩 
select distinct A.Sid,B.score from SC A ,SC B where A.Score=B.Score and A.Cid <>B.Cid ; 
43、查询每门功成绩最好的前两名 
SELECT t1.Sid as 学生ID,t1.Cid as 课程ID,Score as 分数 
FROM SC t1 
WHERE score IN (SELECT TOP 2 score 
FROM SC 
WHERE t1.Cid= Cid 
ORDER BY score DESC 
) 
ORDER BY t1.Cid; 
44、统计每门课程的学生选修人数（超过10人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，查询结果按人数降序排列，若人数相同，按课程号升序排列 
select Cid as 课程号,count(*) as 人数 
from sc 
group by Cid 
order by count(*) desc,cid 
45、检索至少选修两门课程的学生学号 
select Sid 
from sc 
group by sid 
having count(*) > = 2 
46、查询全部学生都选修的课程的课程号和课程名 
select Cid,Cname 
from Course 
where Cid in (select cid from sc group by cid) 
47、查询没学过“叶平”老师讲授的任一门课程的学生姓名 
select Sname from Student where Sid not in (select Sid from Course,Teacher,SC where Course.Tid=Teacher.Tid and SC.Cid=course.Cid and Tname='叶平'); 
48、查询两门以上不及格课程的同学的学号及其平均成绩 
select Sid,avg(isnull(score,0)) from SC where Sid in (select Sid from SC where score <60 group by Sid having count(*)>2)group by Sid; 
49、检索“004”课程分数小于60，按分数降序排列的同学学号 
select Sid from SC where Cid='004'and score <60 order by score desc; 
50、删除“002”同学的“001”课程的成绩 
delete from Sc where Sid='001'and Cid='001'; 
